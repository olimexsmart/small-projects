esphome:
  name: power-display-ring

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: "SoffittaAXSlow"
  password: "BelinoInverso"

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.94
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

sensor:
  - platform: homeassistant
    id: p_tot_color
    entity_id: sensor.power_tot
    internal: true
    filters:
      - calibrate_linear:
          # Map 3900.0 (from sensor) to 255.0 (true value)
          - 0.0 -> 0.0
          - 3900.0 -> 255.0 # 3900W is the max power output before forced disconnection
  
  - platform: homeassistant
    id: p_tot_number_on
    entity_id: sensor.power_tot
    internal: true
    filters:
      - calibrate_linear:
          # Map 3900.0 (from sensor) to 8.0 (true value)
          - 0.0 -> 0.0
          - 3900.0 -> 12.0

light:
  - platform: neopixelbus
    type: GRB
    pin: GPIO3
    num_leds: 12
    variant: WS2812
    method:
      type: esp8266_dma    
    internal: True
    id: led_ring
    name: "LEDRing"
    restore_mode: ALWAYS_ON
    effects: 
      - addressable_lambda:
          name: "Power level"
          update_interval: 10ms
          lambda: |-
            static int secCnt = 0;
            static int offsetLED = 0;
            /*
            static int blueFade = 0;
            static bool blueFlag = true;

            if (blueFlag) {
              blueFade += 1;
              if(blueFade >= 100)
                blueFlag = false;
            } else {
              blueFade -= 25;
              if(blueFade <= 0)
                blueFlag = true;              
            }
            */
            secCnt++;
            if(secCnt >= 100) {
              secCnt = 0;
              offsetLED++;
              offsetLED %= it.size();
            }
            //ESP_LOGD("main", "offsetLED %d", offsetLED);
            for (int i = offsetLED, k = 0; i < offsetLED + it.size(); i++, k++) {
              int trueIndex = i % it.size();
              if (id(p_tot_number_on).state > k) {
                it[trueIndex] = Color(id(p_tot_color).state, 255 - id(p_tot_color).state, secCnt / 2);
              } else {
                it[trueIndex] = Color(0, 0, 0);
              }
            }
    on_turn_on:
      - light.turn_on: 
          id: led_ring
          effect: "Power level"
          brightness: 50%
