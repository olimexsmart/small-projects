esphome:
  name: power-display-ring-1

esp8266:
  board: esp01_1m

logger:

api:
  password: ""

ota:
  password: ""
  platform: esphome

wifi:
  ssid: !secret wifi_name_quarto
  password: !secret wifi_pw_quarto

  # manual_ip:
  #   static_ip: 192.168.1.94
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0

sensor:
  - platform: homeassistant
    id: p_tot_color
    entity_id: sensor.power_tot
    internal: true
    filters:
      - calibrate_linear:
          # Map 3900.0 (from sensor) to 255.0 (true value)
          - 0.0 -> 0.0
          - 3900.0 -> 255.0 # 3900W is the max power output before forced disconnection
  
  - platform: homeassistant
    id: p_tot_number_on
    entity_id: sensor.power_tot
    internal: true
    filters:
      - calibrate_linear:
          # Map 3900.0 (from sensor) to 8.0 (true value)
          - 0.0 -> 0.0
          - 3900.0 -> 12.0

  - platform: homeassistant
    entity_id: sensor.power_tot
    id: tot_power    

binary_sensor:
  - platform: analog_threshold
    id: power_alert
    sensor_id: tot_power
    threshold: 3800
    on_press:
      then:
        - light.control:
            id: led_ring
            red: 100%
            green: 0%
            blue: 0%
            effect: "Fast Pulse"
    on_release:
      then:
        - light.control: 
            id: led_ring
            effect: "Power level"
            brightness: 25%

light:
  - platform: neopixelbus
    type: GRB
    pin: GPIO3
    num_leds: 12
    variant: WS2812
    method:
      type: esp8266_dma    
    internal: True
    id: led_ring
    name: "LEDRing"
    restore_mode: ALWAYS_ON
    effects: 
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - addressable_lambda:
          name: "Power level"
          update_interval: 10ms
          lambda: |-
            // TODO blue color could be used in the future for solar production
            // Every second change starting LED on the ring
            static int secCnt = 0;
            static int offsetLED = 0;
            secCnt++;
            if(secCnt >= 100) {
              secCnt = 0;
              offsetLED++;
              offsetLED %= it.size();
            }
      
            for (int i = offsetLED, k = 0; i < offsetLED + it.size(); i++, k++) {
              int trueIndex = i % it.size();
              if (id(p_tot_number_on).state > k) {
                it[trueIndex] = Color(id(p_tot_color).state, 255 - id(p_tot_color).state, 0);
              } else {
                it[trueIndex] = Color(0, 0, 0); 
              }
            }
    on_turn_on:
      - light.turn_on: 
          id: led_ring
          effect: "Power level"
          brightness: 25%
          # brightness: !lambda |-
          # // output value must be in range 0 - 1.0
          # return id(some_sensor).state / 100.0;
